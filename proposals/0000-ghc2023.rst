GHC2023
=======

.. author:: Joachim Breitner
.. date-accepted::
.. ticket-url::
.. implemented::
.. highlight:: haskell
.. header:: This proposal is `discussed at this pull request <https://github.com/ghc-proposals/ghc-proposals/pull/559>`_.
.. sectnum::
.. contents::


Motivation
----------

The `GHC20xx process proposal <https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0372-ghc-extensions.rst#motivation>`_ motivates why we feel the need for ``GHC20xx`` language editions in general.

The first edition, ``GHC2021``, is now two years old, and I propose we define
``GHC2023`` now, even if turns out to be a modest change, to keep the process alive.

Proposed Change Specification
-----------------------------

The ``GHC2023`` language extension set comprises of all language extensions
that ``GHC2021`` comprises, plus the following

* `ExplicitNamespaces`_
* `LambdaCase`_


(*The committe will vote on each extension separately. Until then, this is the
list of nominated extensions, and will be updated after a vote.*)

Why GHC2023 in the first place
------------------------------
There were concerns that defining ``GHC2023`` is too soon, given that
``GHC2021`` has hardly reached the target audience, and that this introduces
instability.

I believe that neither are good reasons to not define ``GHC2023``:

* There is an inherent latency between defining language editions and them
reaching the users. It reaches users who do not have to worry about supporting
older GHC first, and thus library authors later. This is somewhat unavoidable,
but not per se a reason to reduce the frequency.

* Relatively frequent language editions do not introduce undue instability:
Users who pin the language edition in their `.cabal` file or so are not
affected by the existence of a new one. Neither are users who pin their GHC
version. Only those users who upgrade their version of GHC _and_ ask for the
latest edition may now have access to new features.
.
As `Arnaud explained on the mailing list <https://mail.haskell.org/pipermail/ghc-steering-committee/2022-November/002949.html>`_, Rust (generally not perceived as a language with a perception of low stability) has a very similar model with their “language editions”.

Furthermore, a regular, not too slow cadence makes the whole process more
predictable, which I expect *improves* the perception of stability, in the
sense of delivering a stable flow of changes.


Why add ExplicitNamespaces?
---------------------------

As discussed in `issue #551
<https://github.com/ghc-proposals/ghc-proposals/issues/551>`_, ``GHC2021``
includes `TypeOperators`_, but does not include `ExplicitNamespaces`_. This was
a very strange (and probably inadvertent) decision, given that the flag
``-XTypeOperators`` enables both the `TypeOperators`_ and the
`ExplicitNamespaces`_ language extension.

It seems to be a bad idea to retroactive *change* ``GHC2021`` to fix this (we
do care about stability after all), but we should certainly fix this in the
upcoming edition.

And – at least if one accepts that regular releases of ``GHC20xx`` are a Good
Thing™, adding `ExplicitNamespaces`_ alone should be sufficient to cut a new
release.


Why add LambdaCase?
-------------------

The latest `State of Haskell 2021 Survey results
<https://taylor.fausak.me/2022/11/18/haskell-survey-results/>`_ list
`LambdaCase`_ as the top answer to “Which extension would you want to be on by
default”. It also missed ``GHC2021`` by just two votes. There is a whole style
of writing Haskell that makes extensive use of ``\case``. And (unlike the runner up in the survey, `OverloadedStrings_`), it only enables *new* syntax, i.e. it does not change existing code.

Why not add LambdaCase?
----------------------

We just extended the meaning of `LambdaCase`_ with ``\cases`` in `#302
<https://github.com/ghc-proposals/ghc-proposals/pull/302>`_, and if one only
wants to add extensions to ``GHC20xx`` that have been proven to be stable, then
this one probably isn’t yet.


Alternatives
------------
We could not do ``GHC2023`` and wait another year, or more, because we shy away from
making what may look like a stability-threatning change.
In my view that is worse: The fixes and improvements suggested above would reach our users later, we would not establish a regular and predicatable pattern, and in the worst case never dare to make a new release, which would make the ``GHC20xx`` idea fall into a similar pattern than the ``Haskell20xx`` report process, which at the moment is stalled.


Implementation Plan
-------------------
The actual changes to GHC to add a new language edition are small, and likely
I (Joachim) can prepare a MR.

.. _ExplicitNamespaces: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/explicit_namespaces.html#extension-ExplicitNamespaces
.. _TypeOperators: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/type_operators.html#extension-TypeOperators
.. _OverloadedStrings: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/overloaded_strings.html#extension-OverloadedStrings
.. _LambdaCase: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/lambda_case.html#extension-LambdaCase

